#!/usr/bin/env bash
set -e

if ! [ -x "$(command -v limactl)" ]; then
    echo "no lima"
    exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

if [ ! -d venv ]; then
    ./update.sh
fi

source ./venv/bin/activate

PS3="Select a project: "
select project in $(./.project.py --format json --env=lima | jq -r '.|join(" ")')
do
  project=${project:-$REPLY}

  if ! (./.project.py --format json --env=lima $project 2>&1 >/dev/null); then
    echo ""
    echo "project $project doesn't exist in builder project config"
    exit 1
  fi
  project_config="$(./.project.py --format json --env=lima $project)"
  break;
done

dependant_formulas=$(echo "$project_config" | yq -o j  '(.["formula-dependencies"] // [])|map({"url": ., "name": .|split("/")[-1]})' | jq -c)
project_formula=$(echo "$project_config" | yq -o j  '.["formula-repo"]|{"url": ., "name": .|split("/")[-1]}' | jq -c)
all_formulas=$(echo "[$project_formula]$dependant_formulas" | jq -s 'add' | jq -c)
first_dependant_formula=$(echo "$dependant_formulas" | jq -c '.[0]')
all_the_rest_dependant_formula=$(echo "$dependant_formulas" | jq -c '.[1:]')

readarray -t all_formulas_array < <(echo "$all_formulas" | jq -c '.[]')

for formula in "${all_formulas_array[@]}"; do
    formula_name=$(echo $formula | jq -r .name)
    formula_url=$(echo $formula | jq -r .url)
    formula_path="$DIR/cloned-projects/$formula_name"

    if [ ! -d "$formula_path/.git" ]; then
        echo "cloning $formula_name"
        git clone "$formula_url" "$formula_path" 2>&1 > /dev/null
    else
        echo "updating $formula_name"
        git -C "$formula_path" pull 2>&1 > /dev/null || echo "issue updating checkout"
    fi
done

# Make directories for override salt formulas
mkdir -p $DIR/dev-env/$project/salt
mkdir -p $DIR/dev-env/$project/pillar

minion_config=$(cat << EOF
---
file_client: local
log_level: info
fileserver_backend:
- roots

# Expected order:
# The dev-env override salt formulas
# The first dependant salt formula (usually builder-base-formula)
# The project salt formulas
# The rest of the dependant salt formulas
$(echo "[$first_dependant_formula] [$project_formula] $all_the_rest_dependant_formula" | jq -s "add" | yq -P -o yaml '{"file_roots":{"base":["/builder/dev-env/$project/salt/"] + (.|map("/builder/cloned-projects/" + .name + "/salt/"))}}')

# Expected order:
# The dev-env override formula pillar data
# The project formula pillar data
# The dependant formula pillar data

$(echo "$all_formulas" | yq -P -o yaml '{"pillar_roots":{"base":["/builder/dev-env/$project/pillar/"] + (.|map("/builder/cloned-projects/" + .name + "/salt/pillar"))}}')

EOF
)

minion_config_base64=$(echo "$minion_config" | base64)



instance_name="$project--lima"
salt_version="$(echo $project_config | jq -r .salt)"

lima_config=$(cat << EOF
minimumLimaVersion: "1.0.0"
# turn off containerd setup
containerd:
  system: false
  user: false

# Mount script directory in the VM
mounts:
- location: "$DIR"
  mountPoint: /builder
  writable: false

## Provision
# Update system before anything else
upgradePackages: true

provision:
# Do bootstrap
- mode: system
  script: |
    #!/bin/bash
    bash /builder/scripts/bootstrap.sh "$salt_version" "$instance_name" "false"
# Setup new dev env
- mode: system
  script: |
    #!/bin/bash
    echo $minion_config_base64 | base64 -d > /etc/salt/minion


# Embed entire project lima config here
$(echo $project_config | jq .lima | yq -P --output-format yaml '.')
# End project config
EOF
)



vm_name="$project-lima"
echo "$lima_config" | limactl create --tty=false --name="$vm_name" -
limactl start $vm_name
