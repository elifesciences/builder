defaults:
    description: defaults for all projects in this file
    salt: '2016.3' # the version of salt these project use
    # use false with a subdomain to assign internal addresses only
    domain: example.org
    # addressing within VPC
    intdomain: example.internal
    # 'lax', 'metrics', 'gateway', etc
    subdomain: null
    # projects with an explicit `repo` attribute support branch deployments with
    # ./bldr deploy
    repo: null
    # repository containing build instructions for this project
    formula-repo: null
    # repo containing project pillar data (credentials typically)
    # only the master-server will have a copy of this and only the master-server
    # will need permissions to clone it
    private-repo: ssh://github.com/exampleorg/builder-private-example
    configuration-repo: ssh://github.com/exampleorg/builder-configuration-example
    # default branch to use when creating new instances
    default-branch: master
    # in some cases we have formulas requiring the states of other formulas
    formula-dependencies:
        - https://github.com/example/builder-base-formula
    aws:
        account-id: 512686554592
        unique: false
        ec2:
            cluster-size: 1
            cpu-credits: standard
            # whether the first EC2 node should get an external DNS entry such as env--project--1.elifesciences.org
            # only makes sense if cluster-size > 1
            dns-external-primary: false
            # whether the EC2 nodes should get a per-node internal DNS entry such as env--project--1.elife.internal
            # only makes sense if cluster-size > 1
            dns-internal: false
            # override 'ext' (only supported key)
            # for some EC2 instances
            overrides: {}
            # destroy some EC2 instances in the cluster for future re-creation
            suppressed: []
            # find more here: http://cloud-images.ubuntu.com/releases/
            # Ubuntu 14.04
            ami: ami-9eaa1cf6
            # use a master server or go ronin?
            masterless: false
            # optional: pin a master server for all new instances of a project
            master_ip: 10.0.2.42
            # optional: specify `ports` to be opened
            security-group: {}
        region: us-east-1
        vpc-id: vpc-78a2071d  # vpc-id + subnet-id are peculiar to AWS account + region
        subnet-id: subnet-1d4eb46a # elife-public-subnet, us-east-1d
        subnet-cidr: '10.0.2.0/24'
        availability-zone: us-east-1d
        ## additional value in case of capacity problems: elife-public-subnet-3, us-east-1a
        # subnet-id: subnet-2116727b
        # subnet-cidr: '10.0.10.0/24'
        # necessary for multiple-node EC2 and for ELB
        redundant-subnet-id: subnet-7a31dd46 # elife-public-subnet-2
        redundant-subnet-cidr: '10.0.2.0/24'
        redundant-availability-zone: us-east-1e
        type: t2.small
        rds:
            multi-az: false
            engine: postgres # or 'MySQL'
            # ensure this matches the version of Postgres you install on server!
            version: '9.4'
            allow-major-version-upgrade: False # do not alter unless you're doing a major version upgrade
            type: db.t2.small
            storage: 5 # GB
            # Standard for backward compatibility
            # https://docs.aws.amazon.com/AmazonRDS/latest/APIReference/API_CreateDBInstance.html
            storage-type: 'standard' # standard|gp2|io1
            backup-retention: 28 # days
            # if rds.params are specified, a custom db parameter group is created
            params: []
            encryption: false
            # two subnets are required in two different availability zones
            # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
            subnets:
                # two are required
                # NOTE! the 'dbsubnet-' prefix is important to *builder*
                # it tells us which subnets we can provision RDS within
                - subnet-foo
                - subnet-bar
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html
            #deletion-policy: Snapshot # 'Delete', 'Retain' 'Snapshot' # todo: enable
        ext:
            # EBS 'external' volume
            # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html
            #type: gp2 # standard|gp2|io1|sc1 # todo: enable
            size: 10 # GB
            device: /dev/sdh
        alb:
            # elb defaults only used if an 'elb' section present in project
            stickiness: false
            protocol: http
            additional_listeners: {}
            idle_timeout: 60
            # maintained through `aws iam upload-server-certificate`
            certificate: arn:aws:iam::...:...
            healthcheck:
                protocol: http
                port: 80
                path: /ping
                timeout: 4
                interval: 5
                unhealthy_threshold: 2
                healthy_threshold: 2
        elb:
            # elb defaults only used if an 'elb' section present in project
            stickiness: false
            protocol: http
            additional_listeners: {}
            idle_timeout: 60
            # maintained through `aws iam upload-server-certificate`
            certificate: arn:aws:iam::...:...
            healthcheck:
                protocol: http
                port: 80
                path: /ping
                timeout: 4
                interval: 5
                unhealthy_threshold: 2
                healthy_threshold: 2
        sqs: []
        sns: []
        # e.g.
        # s3:
        #    bucket-name-{instance}:
        #       sqs-notifications: # not implemented
        #           queue-name:
        #               prefix: 'elife-'
        #               suffix: '.xml'
        #       deletion-policy: delete|retain
        #       encryption: false
        s3: []
        eks:
            # eks defaults only used if a 'eks' section present in project
            #https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html
            version: '1.11'
            # two subnets in two different availability zones, both used in master nodes and in worker nodes
            subnet-id: subnet-a1a1a1a1
            redundant-subnet-id: subnet-b2b2b2b2
            worker:
                type: t2.small
                # autoscaling group will never have fewer than these EC2 nodes
                min-size: 1
                # autoscaling group will never have more than these EC2 nodes
                max-size: 3
                # (currently fixed) number of EC2 nodes
                desired-capacity: 3
            helm: false
            external-dns: false
            efs: false
        cloudfront:
            # cloudfront defaults only used if a 'cloudfront' section present in project
            #subdomains: [] # todo: enable
            subdomains-without-dns: []
            #domains: [] # todo: enable
            origins: {}
            # maintained through `aws iam upload-server-certificate`
            certificate_id: 'dummy...'
            cookies: []
            compress: true
            headers: []
            errors: null
            default-ttl: 300 # seconds
            logging: false
        fastly:
            # fastly defaults only used if a 'fastly' section present in project
            subdomains: []
            subdomains-without-dns: []
            default-ttl: 3600 # seconds
            shield: false
            dns:
                cname: something.fastly.net
                a:
                    - 127.0.0.1
                    - 127.0.0.2
            gcslogging: false
            bigquerylogging: false
            healthcheck: false
            errors: false
            ip-blacklist: false
            vcl-templates: {}
            vcl: []
            surrogate-keys: {}
        subdomains: []
        elasticache:
            # elasticache defaults only used if an `rds` section present in project
            type: cache.t2.small # 1.55 GB of memory, ~$25/mo
            engine: redis
            az: "us-east-1a" # alternative: us-east-1e to match EC2 instances
            subnets:
                - subnet-foo
                - subnet-bar
            version: "2.8.24" # closest to builder-base-formula redis.sls
            configuration:
                maxmemory-policy: volatile-ttl
            clusters: 1
        vault:
            address: https://vault.example.org:8200
        docdb:
            # one primary, one replica
            cluster-size: 2
            backup-retention-period: null # days, null for 'no backups'
            # if true, cluster will require this value changed to 'true' to be deleted.
            deletion-protection: False
            # https://aws.amazon.com/documentdb/pricing/
            # "DocumentDB 4.0 supports r5 and t3.medium instance types"
            type: db.t3.medium
            engine-version: 4.0.0
            subnets:
                - subnet-foo
                - subnet-bar
    aws-alt:

        # note! all aws-alt configurations below will be inherited by *all* projects.
        # note! only use lowercase and hyphens for alt-config names.

        fresh:
            description: uses a public Ubuntu AMI instead of an elife generated basebox.
            ec2:
                ami: ami-9eaa1cf6 # Ubuntu 14.04
    gcp:
        bigquery: false
    vagrant:
        box: ubuntu/trusty64 # Ubuntu 14.04
        box-url: null # not needed for boxes hosted on Atlas
        ip: 192.168.33.44
        ram: 1024
        cpus: 2
        cpucap: 100 # percent (vagrant default)
        # port mapping from host => guest
        #ports:
        #    1239: 80
        #    1240: 8001

# basic vagrant and aws, no alternative config
dummy1:
    # disabled so we can test subdomain-less projects
    #subdomain: dummy1 # dummy.elifesciences.org
    repo: ssh://git@github.com/elifesciences/dummy1
    aws:
        type: t2.micro
        ports:
            - 22
    vagrant:
        ports:
            1239: 80

# elaborate aws and vagrant, several alternate configs
dummy2:
    subdomain: dummy2 # dummy.elifesciences.org
    repo: ssh://git@github.com/elifesciences/dummy2
    meta:
        description: "foo"
    aws:
        ports:
            - 22
            - 80:
                guest: 80
                cidr-ip: 0.0.0.0/0
        ec2:
            ami: ami-111111
        rds:
            storage: 10
        subdomains:
            - official
    aws-alt:
        # uses an rds backend and different ami
        alt-config1:
            rds:
                storage: 15
                type: db.m4.huge
            ec2:
                ami: ami-22222
    vagrant:
        ports:
            1239: 80

# basic aws, no vagrant, alternate aws configs
dummy3:
    subdomain: dummy3
    repo: ssh://git@github.com/elifesciences/dummy3
    meta:
        description: "foo"
    aws:
        ec2:
            ami: ami-111111
        ports:
            - 22
    aws-alt:
        # uses an rds backend, snapshot on delete
        alt-config1:
            ports:
                - 80
            rds:
                storage: 15
            ext:
                size: 200
        # uses an rds backend, no snapshot on delete
        alt-config2:
            rds:
                deletion-policy: Delete

just-some-sns:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ec2: false
        sns: 
            - widgets-{instance}

project-with-sqs:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ec2: false
        sqs: 
            project-with-sqs-incoming-{instance}: 
                subscriptions:
                    - widgets-{instance}

project-with-s3:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ec2: false
        s3: 
            widgets-{instance}: 
            widgets-archive-{instance}: 
                deletion-policy: retain
            widgets-static-hosting-{instance}:
                website-configuration:
                    index-document: index.html
                cors: true
            widgets-just-access-{instance}:
                public: true
            widgets-encrypted-{instance}:
                encryption: arn:aws:kms:us-east-1:1234:key/12345678-1234-1234-1234-123456789012

project-with-ext:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ports:
            - 80
        ext: 
            size: 200

project-with-cloudfront:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        cloudfront:
            subdomains:
                - "{instance}--cdn-of-www"
                - ""
            subdomains-without-dns:
                - future
            cookies:
                - session_id
            headers:
                - Accept
            default-ttl: 5
            logging:
                bucket: acme-logs

project-with-cloudfront-minimal:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        cloudfront:
            subdomains:
                - "{instance}--cdn-of-www"

project-with-cloudfront-error-pages:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        cloudfront:
            subdomains:
                - "{instance}--cdn-of-www"
            errors: 
                domain: "{instance}--example-errors.com"
                pattern: "???.html"
                codes:
                    502: "/5xx.html"
                protocol: http

project-with-cloudfront-origins:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ports:
            - 80
        cloudfront:
            subdomains:
                - "{instance}--cdn"
            origins:
                default-bucket:
                    hostname: "{instance}--default-bucket.s3.amazonaws.com"
                some-bucket:
                    hostname: "{instance}--some-bucket.s3.amazonaws.com"
                    pattern: articles/*
                    headers:
                        - Referer
                    cookies:
                        - session_id

project-with-fastly-minimal:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        fastly:
            subdomains:
                - "{instance}--cdn-of-www"

project-with-fastly-complex:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        fastly:
            shield: true
            backends:
                default:
                    hostname: default.example.org
                    shield: false
                articles:
                    hostname: "{instance}-special.example.org"
                    condition: req.url ~ "^/articles"
                    shield:
                        pop: amsterdam-nl
                articles2:
                    hostname: "{instance}-special2.example.org"
                    condition: req.url ~ "^/articles2"
                    shield: true
                articles3:
                    hostname: "{instance}-special3.example.org"
                    condition: req.url ~ "^/articles3"
            subdomains:
                - "{instance}--cdn1-of-www"
                - "{instance}--cdn2-of-www"
                - ""
                - "anotherdomain.org"
            subdomains-without-dns:
                - "future"
            default-ttl: 86400
            healthcheck:
                path: /ping-fastly
                check-interval: 30000
                timeout: 10000
            errors:
                url: https://example.com
                codes:
                    503: "/503.html"
                    404: "/404.html"
                fallbacks:
                    5xx: "/5xx.html"
                    4xx: "/4xx.html"
            ip-blacklist: true
            vcl:
                - "gzip-by-content-type-suffix"
            surrogate-keys:
                article-id:
                    # TODO: rename to path
                    url: "^/articles/(\\d+)/(.+)$"
                    value: "article/\\1"
                    samples:
                        article-pdf:
                            path: /articles/10627/elife-10627-v1.pdf
                            expected: article/10627

project-with-fastly-gcs:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        fastly:
            subdomains:
                - "{instance}--cdn-of-www"
            gcslogging:
                bucket: my-bucket
                path: my-project/
                period: 1800

project-with-fastly-bigquery:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        ports:
            - 80
        fastly:
            subdomains:
                - "{instance}--cdn-of-www"
            bigquerylogging:
                project: my-project
                dataset: my_dataset
                table: my_table

project-with-fastly-shield:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        fastly:
            shield: true

project-with-fastly-shield-pop:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: www
    aws:
        fastly:
            shield:
                pop: london-uk

project-with-ec2-custom-root:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ec2:
            root:
                size: 20 # GB

project-with-ec2-t2-unlimited:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ec2:
            cpu-credits: unlimited

project-with-cluster:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    aws:
        ports:
            - 80
        ec2:
            cluster-size: 2
            dns-external-primary: true
            dns-internal: true
        elb: 
            protocol: http
        subdomains:
            - project.tv
            - ""

project-with-cluster-suppressed:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    # no internal domain, while the public 'domain' is true by default
    intdomain: false
    aws:
        ports:
            - 80
        ec2:
            cluster-size: 3
            suppressed: [1]
        ext:
            size: 10
        elb: 
            protocol: http

project-with-cluster-overrides:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    # no internal domain, while the public 'domain' is true by default
    intdomain: false
    aws:
        ports:
            - 80
        ec2:
            cluster-size: 2
            overrides:
                1: 
                    type: t2.xlarge
                    ext: 
                        size: 20
        ext:
            size: 10
        elb: 
            protocol: http

project-with-cluster-empty:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    intdomain: false
    aws:
        ec2:
            cluster-size: 0
            security-group:
                ports:
                    - 22

project-with-stickiness:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    # no internal domain, while the public 'domain' is true by default
    intdomain: false
    aws:
        ports:
            - 80
        ec2:
            cluster-size: 2
        elb: 
            protocol: http
            stickiness:
                type: cookie
                cookie-name: mysessionid

project-with-multiple-elb-listeners:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    # no internal domain, while the public 'domain' is true by default
    intdomain: false
    aws:
        ports:
            - 25
            - 80
            - 8001
        ec2:
            cluster-size: 2
        elb: 
            protocol:
                - http
                - 25
            additional_listeners:
                some_daemon:
                    protocol: https
                    port: 8001
        subdomains:
            - project.tv
            - ""

project-with-cluster-integration-tests:
    repo: ssh://git@github.com/elifesciences/dummy3
    subdomain: project-with-cluster
    # no dummy domains since we really create this on CloudFormation
    domain: false
    intdomain: false
    aws:
        ports:
            - 80
            - 22
        ec2:
            cluster-size: 2
        elb: 
            protocol: http
            healthcheck:
                protocol: tcp
                port: 22

project-with-db-params:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ports: [80]
        rds:
            params:
                key1: val1
                key2: val2

project-with-rds-only:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        ec2: false
        rds:
            storage: 5

project-with-rds-encryption:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        rds:
            storage: 5
            encryption: arn:aws:kms:us-east-1:1234:key/12345678-1234-1234-1234-123456789012

project-with-rds-major-version-upgrade:
    repo: ssh://git@github.com/elifesciences/dummy3
    aws:
        rds:
            allow-major-version-upgrade: True

project-with-elasticache-redis:
    domain: False
    intdomain: False
    subdomain: www
    aws:
        ec2: false
        ports:
            - 80
        elasticache:
            engine: redis

project-with-multiple-elasticaches:
    domain: False
    intdomain: False
    subdomain: www
    aws:
        ec2: false
        ports:
            - 80
        elasticache:
            engine: redis
            clusters: 3
            configuration:
                maxmemory-policy: volatile-lru
            suppressed: [3]
            overrides:
                2: 
                    type: cache.t2.medium
                    configuration:
                        maxmemory-policy: volatile-ttl

project-with-fully-overridden-elasticaches:
    domain: False
    intdomain: False
    subdomain: www
    aws:
        ec2: false
        ports:
            - 80
        elasticache:
            engine: redis
            clusters: 2
            configuration:
                maxmemory-policy: volatile-lru
            overrides:
                1:
                    configuration:
                        maxmemory-policy: volatile-ttl
                2: 
                    configuration:
                        maxmemory-policy: volatile-ttl

project-on-gcp:
    description: project with resources only on Google Cloud Platform
    domain: False
    intdomain: False
    # I know, this should be gcp, but actually should be renamed
    # to "cloud" or "remote" or similar
    # TODO: move onto separate key with 'gcp'?
    aws:
        ec2: false
        gcs:
            "widgets-{instance}":
                project: elife-something
                # space for options
                #
    aws-alt: {}

project-with-bigquery-datasets-only:
    description: project on Google Cloud Platform, using BigQuery
    domain: False
    intdomain: False
    # see project-on-gcp:
    aws:
        ec2: false
    gcp:
        bigquery:
            my_dataset_{instance}:
                project: elife-something
    aws-alt: {}
    gcp-alt:
        staging:
            bigquery:
                my_dataset_{instance}:
                    tables:
                        my_table: {}

project-with-bigquery:
    description: project on Google Cloud Platform, using BigQuery
    domain: False
    intdomain: False
    # see project-on-gcp:
    aws:
        ec2: false
    gcp:
        bigquery:
            #location: US
            "my_dataset_{instance}":
                project: elife-something
                tables:
                    widgets:
                        schema: ./src/buildercore/bigquery/schemas/key-value.json
                    partitioned_table:
                        schema: ./src/buildercore/bigquery/schemas/key-value.json
                        time-partitioning:
                            field: a_timestamp
                            type: DAY
    aws-alt: {}

project-with-bigquery-remote-schemas:
    description: project on Google Cloud Platform, using BigQuery
    domain: False
    intdomain: False
    # see project-on-gcp:
    aws:
        ec2: false
    gcp:
        bigquery:
            #location: US
            "my_dataset_{instance}":
                project: elife-something
                tables:
                    remote:
                        schema: https://example.org/schemas/remote.json
                    remote_github:
                        schema: https://raw.githubusercontent.com/myrepo/something.json
                    local:
                        schema: ./src/buildercore/bigquery/schemas/key-value.json
    aws-alt: {}

project-with-eks:
    description: project managing an EKS cluster
    domain: False
    intdomain: False
    aws:
        eks:
            subnet-id: subnet-a1a1a1a1
            redundant-subnet-id: subnet-b2b2b2b2
            worker:
                type: t2.small
                desired-capacity: 3
                min-size: 1
                max-size: 3

project-with-eks-helm:
    description: project managing an EKS cluster with Helm for chart installation
    domain: False
    intdomain: False
    aws:
        eks:
            helm: true

project-with-eks-external-dns:
    description: project managing an EKS cluster with external-dns for Route53 entries creation
    domain: False
    intdomain: False
    aws:
        eks:
            helm: true  # required
            external-dns:
                domain-filter: "elifesciences.net"

project-with-eks-efs:
    description: project managing an EKS cluster with EFS support
    domain: False
    intdomain: False
    aws:
        eks:
            efs: true

project-with-docdb:
    description: project managing a single DocumentDB instance
    aws:
        ec2: false
        docdb: {} # use default config

project-with-docdb-cluster:
    description: project managing a single DocumentDB instance
    aws:
        docdb:
            cluster-size: 3
            backup-retention-period: 14 # days
            deletion-protection: True
            engine-version: 4.0.0

project-with-unique-alt-config:
    description: project has a unique configuration
    aws:
        ec2: false
    aws-alt:
        prod:
            unique: true

project-with-alb:
    subdomain: project-with-alb
    aws:
        subdomains:
            - foo.bar
        ports:
            - 22
            - 80
        ec2:
            cluster-size: 2
        alb: 
            listeners:
                - http: 80
                - https: 443
                - https: 8001
            stickiness:
                type: cookie
                cookie-name: dummy-cookie
