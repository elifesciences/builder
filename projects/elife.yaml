defaults:
    description: default settings for all projects in *this* file.
    meta:
        # distinguishes this data from other types and versions of configuration data
        type: project
        version: 1
    salt: "3006" # the version of Salt to install on ec2 instances
    terraform:
        # the version of Terraform this project requires
        version: "1.1.9"
        # the version of Terraform providers (plugins) required.
        provider-aws:
            source: "hashicorp/aws"
            version: "4.66.1"
        provider-tls:
            source: "hashicorp/tls"
            version: "4.0.4"
        provider-kubernetes:
            source: "hashicorp/kubernetes"
            version: "2.20.0"
        provider-fastly:
            source: "fastly/fastly"
            version: "1.1.4"
        provider-vault:
            source: "hashicorp/vault"
            version: "3.14.0"
        provider-google:
            source: "hashicorp/google"
            version: "2.20.3"
    # use false with a subdomain to assign internal addresses only
    domain: elifesciences.org
    # addressing within VPC
    intdomain: elife.internal
    # 'lax', 'metrics', 'gateway', etc
    subdomain: null
    # projects with an explicit `repo` attribute support branch deployments with
    # ./bldr deploy
    repo: null
    # repository containing build instructions for this project
    formula-repo: null
    # repo containing project pillar data (credentials typically)
    # only the master-server will have a copy of this and only the master-server
    # will need permissions to clone it
    private-repo: git@github.com:elifesciences/builder-private
    configuration-repo: git@github.com:elifesciences/builder-configuration
    # default branch to use when creating new instances
    default-branch: master
    # in some cases we have formulas requiring the states of other formulas
    formula-dependencies:
        - https://github.com/elifesciences/builder-base-formula
    aws:
        account-id: 512686554592
        # can this configuration be reused or is it unique?
        # typically it can be reused, but some configurations embed values that are unique to a named instance.
        # for example: the 'prod' configuration for 'journal' is unique to `journal--prod` and cannot be reused.
        unique: false
        ec2:
            type: t3.small # ~ $20/mo
            # ports: {} # no open ports
            # ports:
            #    - 22 # open ssh to world
            #    - 4506: # open 4506 to VPC ip range only
            #        cidr-ip: 10.0.0.0/16
            # root partition properties, left undefined, results in a ~7.7GiB EBS root volume
            #root:
            #    size:
            #    type: standard|gp2|ebs # default is 'standard'. t2 'standard' is magnetic, t3 'standard' is gp2.
            # how many EC2 instance per stack instance
            cluster-size: 1
            # turn on T2 `unlimited` if necessary
            # lsh@2022-07: all instances run on type T3 now, this option should be removed.
            cpu-credits: standard
            # whether the first EC2 node should get an external DNS entry such as env--project--1.elifesciences.org
            # only makes sense if cluster-size > 1 with no load balancer.
            # lsh@2022-09: unused feature, not sure which project it was built for.
            dns-external-primary: false
            # whether the EC2 nodes should get a per-node internal DNS entry such as env--project--1.elife.internal
            # only makes sense if cluster-size > 1 with no load balancer (see 'search' project).
            dns-internal: false
            # override 'ext' (only supported key)
            # for some EC2 instances
            overrides: {}
            # destroy some EC2 instances in the cluster for future re-creation
            suppressed: []
            # find more here: http://cloud-images.ubuntu.com/releases/
            # Ubuntu 18.04
            ami: ami-01562756d8ca2f903 # GENERATED created from basebox--2004
                                       # us-east-1, build date 20180814, hvm:ebs-ssd, AMI built on 20180828
            # use a master server or go ronin?
            masterless: false
            # pin a master server for all new instances of a project
            # (I know, it's no longer an IP, bad name choice)
            master_ip: prod--master-server.elife.internal
            # optional: specify `ports` to be opened
            security-group: {}
        region: us-east-1
        vpc-id: vpc-78a2071d  # vpc-id + subnet-id are peculiar to AWS account + region

        subnet-id: subnet-1d4eb46a # elife-public-subnet, us-east-1d
        subnet-cidr: '10.0.2.0/24'
        availability-zone: us-east-1d

        redundant-subnet-id: subnet-7a31dd46 # elife-public-subnet-2, us-east-1e
        redundant-subnet-cidr: '10.0.3.0/24'
        redundant-availability-zone: us-east-1e

        # lsh@2022-06-27: t3.* instance types not available in us-east-1e
        # - https://aws.amazon.com/premiumsupport/knowledge-center/ec2-instance-type-not-supported-az-error/
        redundant-subnet-id-2: subnet-2116727b # elife-public-subnet-3, us-east-1a
        redundant-subnet-cidr-2: '10.0.10.0/24'
        redundant-availability-zone-2: us-east-1a

        rds:
            multi-az: false
            engine: postgres # or 'MySQL'
            # ensure this matches the version of Postgres you install on server!
            version: '12' # EOL Nov 14 2024
            allow-major-version-upgrade: False # do not alter unless you're doing a major version upgrade
            type: db.t3.small
            storage: 5 # GB
            # name of the database to be created and *not* the RDS Instance ID.
            # if null (default) then a database with slugified stackname will be created.
            # if snapshot-id is used, then the name of the database in the snapshot should be used.
            db-name: null
            storage-type: gp2 # standard|gp2|io1
            backup-retention: 28 # days
            # if rds.params are specified, a custom db parameter group is created
            params: []
            encryption: false
            # create a new RDS instance from the snapshot of another one.
            # updates to the stack do *not* roll the database back to the snapshot, but the snapshot-id *must* be present,
            # otherwise a new RDS instance is created.
            snapshot-id: null # snapshot's ARN
            # two subnets are required in two different availability zones
            # http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-rds-dbsubnet-group.html
            subnets:
                # two are required
                # NOTE! the 'dbsubnet-' prefix is important to *builder*
                # it tells us which subnets we can provision RDS within
                - subnet-8eea67d7 # elife-dbsubnet-1
                - subnet-dbc471f0 # elife-dbsubnet-2
            # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-attribute-deletionpolicy.html
            deletion-policy: Snapshot # 'Delete', 'Retain' 'Snapshot'
        # TODO: move inside aws.ec2
        ext:
            # EBS 'external' volume
            # https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html
            type: gp2 # standard|gp2|io1|sc1
            size: 10 # GB
            device: /dev/sdh

        # alb default only used if an 'alb' section present in project
        # also known as 'Elastic Load Balancer v2'
        alb:
            stickiness: false
            #stickiness:
            #   type: cookie | browser
            #   cookie-name: ...
            # 'listeners' replaces ELB's 'protocol' and 'additional_listeners'
            listeners:
                listener1:
                    protocol: http
                    port: 80
                    forward: target-group1

                listener2:
                    protocol: https
                    port: 443
                    forward: target-group1

            target_groups:
                target-group1:
                    protocol: http
                    port: 80
                    healthcheck:
                        path: /ping
                        timeout: 4
                        interval: 5
                        unhealthy_threshold: 2
                        healthy_threshold: 2
            idle_timeout: 60
            # maintained through `aws iam upload-server-certificate`
            certificate: arn:aws:iam::512686554592:server-certificate/cloudfront/wildcard.elifesciences.org/2023-02-06.wildcard.elifesciences.org

        # elb defaults only used if an 'elb' section present in project
        elb:
            stickiness: false
            #stickiness:
            #   type: cookie | browser
            #   cookie-name: ...
            protocol: http
            additional_listeners: {}
            idle_timeout: 60
            # maintained through `aws iam upload-server-certificate`
            certificate: arn:aws:iam::512686554592:server-certificate/cloudfront/wildcard.elifesciences.org/2023-02-06.wildcard.elifesciences.org
            healthcheck:
                protocol: http
                port: 80
                path: /ping
                timeout: 4
                interval: 5
                unhealthy_threshold: 2
                healthy_threshold: 2

        # when both elb and alb are present, the *elb* is the primary load balancer.
        # change this (per-project) to 'alb' to migrate from one configured lb to the other.
        primary_lb: elb

        sqs: []
        #   subscriptions:
        #       - project-sns-name
        #       - {instance}--project-sns-name

        sns: []
        #   - project-sns-name
        #   - {instance}--project-sns-name

        s3: []
        #    bucket-name-{instance}:
        #       not implemented in Cloudformation. see `src.bootstrap.update_s3_stack`
        #       sqs-notifications:
        #           queue-name:
        #               prefix: 'elife-'
        #               suffix: '.xml'
        #       deletion-policy: delete|retain (default 'delete')
        #       encryption: false

        eks:
            # eks defaults only used if a 'eks' section present in project
            #https://docs.aws.amazon.com/eks/latest/userguide/platform-versions.html
            version: '1.17'
            # two subnets in two different availability zones, both used in master nodes
            subnet-id: subnet-0c60bc3cb24a2816b
            redundant-subnet-id: subnet-009a04cbefc8e3661
            # two subnets in two different availability zones, both used in worker nodes
            worker-subnet-id: subnet-07e912335040a0866
            worker-redundant-subnet-id: subnet-0110e7685debdb5eb
            worker:
                type: t2.small
                # autoscaling group will never have fewer than these EC2 nodes
                min-size: 1
                # autoscaling group will never have more than these EC2 nodes
                max-size: 3
                # (currently fixed) number of EC2 nodes
                desired-capacity: 1
                # Whether to ignore drift in desired-capacity (due to f.e. the autoscaler taking control)
                ignore-desired-capacity-drift: false
                #root:
                #   size: 20 # GiB, default
            efs: false
            addons:
                coredns: {}
                kube-proxy:
                    label: kube_proxy
                aws-ebs-csi-driver:
                    label: aws_ebs_csi_driver
                    irsa-role:
                        policy-template: aws-ebs-csi-driver
                        service-account: ebs-csi-controller-sa
                        namespace: kube-system
                vpc-cni:
                    label: vpc_cni
                    irsa-role:
                        managed-policy: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
                        service-account: aws-node
                        namespace: kube-system


            # this configures IAM roles for service accounts (IRSA).
            iam-oidc-provider: false

            # We also have some prebuilt IRSA permissions templates for services that can be running on the cluster
            # This is a dict with a unique name as key and an object mapping a prebuilt template applied to a role with an inline policy to a cluster service account as value
            # available templates are: kubernetes-autoscaler external-dns aws-ebs-csi-driver
            iam-roles:
                # kubernetes-autoscaler:
                #     policy-template: kubernetes-autoscaler
                #     service-account: cluster-autoscaler-aws-cluster-autoscaler
                #     namespace: autoscaler
                # external-dns:
                #     policy-template: external-dns
                #     service-account: infra-external-dns
                #     namespace: infra
        cloudfront:
            # cloudfront defaults only used if a 'cloudfront' section present in project
            subdomains: []
            subdomains-without-dns: []
            domains: []
            origins: {}
            # maintained through `aws iam upload-server-certificate`
            # arn:aws:iam::512686554592:server-certificate/cloudfront/wildcard.elifesciences.org/2023-02-06.wildcard.elifesciences.org
            certificate_id: ASCAXOXT77XQDKWEEYGJH
            cookies: []
            compress: true
            headers: []
            errors: null
            default-ttl: 0 # seconds
            logging: false
        fastly:
            # fastly defaults only used if a 'fastly' section present in project
            subdomains: []
            subdomains-without-dns: []
            default-ttl: 3600 # Fastly default, in seconds
            shield: true
            dns:
                cname: u2.shared.global.fastly.net
                a:
                    - 151.101.2.217
                    - 151.101.66.217
                    - 151.101.130.217
                    - 151.101.194.217
            gcslogging: false
            # gcslogging:
            #   bucket:
            #   path:
            #   period:
            bigquerylogging: false
            # bigquerylogging:
            #   project:
            #   dataset:
            #   table:
            healthcheck: false
            errors: false
            ip-blacklist: false
            vcl-templates: {}
            vcl:
                - "original-host"
            surrogate-keys: {}
            # if no backend specified then a Fastly 'shield' is used.
            # the Fastly shield PoP to use is mapped to the 'aws.region' value.
            #backends:
            #    # first is default
            #    default:
            #        hostname: some-bucket.s3.amazonaws.com
            #    articles:
            #        hostname: "{instance}-some-bucket.s3.amazonaws.com"
            #        condition: req.url ~ "^/some-prefix/"
        subdomains: []
        elasticache:
            # elasticache defaults only used if an `rds` section present in project
            type: cache.t2.small # 1.55 GB of memory, ~$25/mo
            engine: redis
            az: "us-east-1d" # alternative: us-east-1e to match EC2 instances
            subnets:
                - subnet-20275c68 # elife-cache-subnet-1
                - subnet-c4033af8 # elife-cache-subnet-2
            version: "6.2"
            configuration:
                maxmemory-policy: volatile-lru
            clusters: 1
        vault:
            address: https://master-server.elifesciences.org:8200
        docdb:
            # one primary, one replica
            cluster-size: 2
            backup-retention-period: null # days, null for 'no backups'
            # if true, cluster will require this value changed to 'true' to be deleted.
            deletion-protection: False
            # https://aws.amazon.com/documentdb/pricing/
            # "DocumentDB 4.0 supports r5 and t3.medium instance types"
            type: db.t3.medium
            engine-version: 4.0.0
            subnets:
                - subnet-0590f9e8ead4bbd9a # elife-docdb-subnet-1
                - subnet-02dc8ba012ee359ae # elife-docdb-subnet-2
        waf:
            # a map of IP group-name to ip-group
            ip-sets: {}
            # a list of ARNs that should be attached to this WAF. Only tested with ALBs.
            associations: []
            # default action for requests that don't match any rule in the list of below rules.
            action: allow # count, block, custom-response
            # custom rule sets, $1/mo each.
            # the implementation of these is done as snippets of JSON rather than modeling them in Troposphere.
            # it makes them slightly *brittle* but you can also build rules in the WAF Rule Builder and then drop
            # them in here with no/little effort.
            # see `src/buildercore/waf/*.json` for examples.
            custom-rules: []
            # managed rule sets, $1/mo, "vendorname/ruleset-name"
            # a map of vendor->rulesets.
            # - https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-list.html
            managed-rules: {}
            #   NS/ManagedRuleSetName:
            #       # order precedence of this ruleset vs other rules and rule sets
            #       priority: 5
            #       # just to illustrate which rules are not being excluded.
            #       included: []
            #       # excluded rules in a ruleset are set to 'count' only.
            #       # requests matching a non-excluded rule will take the rule's action, which is either 'none' or 'block'
            #       # 'none' will defer to the WebACL's default action (allow).
            #       excluded:
            #           - RuleName1
            #           - RuleName2
    aws-alt:

        # note! all aws-alt configurations below will be inherited by *all* projects.
        # note! only use lowercase and hyphens for alt-config names.

        fresh:
            description: uses a public Ubuntu AMI instead of an elife generated basebox.
            ec2:
                # should be the same as basebox '20.04' aws-alt configurations
                ami-01b996646377b6619 # focal, build 20220131, hvm:ebs-ssd

        snsalt:
            description: uses the next version of Salt to test formula for problems upgrading. OS agnostic, isolated from the master-server and any external pillar data (Vault)
            ec2:
                salt: '3006'
                masterless: True

        # lsh@2022-07: remove this alt-config once all formula Jenkinsfiles are updated
        s2004:
            description: Ubuntu 20.04 (Focal) but isolated from the master-server and any external pillar data (Vault)
            ec2:
                masterless: true

        standalone:
            description: same as default configuration, but isolated from the master-server and any external pillar data (Vault)
            ec2:
                masterless: true
    gcp:
        bigquery: false
    vagrant:
        box: ubuntu/focal64 # 20.04
        ip: 192.168.56.44
        ram: 2048
        cpus: 2
        cpucap: 100 # percent (vagrant default)
        # port mapping from host => guest
        #ports:
        #    1239: 80
        #    1240: 8001

builder:
    formula-repo: https://github.com/elifesciences/builder-formula
    aws: {}
    vagrant: {}

basebox:
    formula-repo: https://github.com/elifesciences/basebox-formula
    aws:
        ec2:
            ami: ami-01b996646377b6619 # focal, build 20220131, hvm:ebs-ssd
            ports:
                - 22
    vagrant: {}

heavybox:
    description: builds as many of the builder-base-formula states as possible
    formula-repo: https://github.com/elifesciences/heavybox-formula
    aws:
        ec2:
            ports:
                - 22
        ext:
            size: 10 # GB
    aws-alt: {}
    vagrant: {}

master-server:
    subdomain: master-server
    # formula-repo for the 'master-server' project should contain the
    # confidential pillar data, master config and state top file.
    # see: https://github.com/elifesciences/builder-private
    formula-repo: https://github.com/elifesciences/master-server-formula
    aws:
        ec2:
            ports:
                - 22
                - 4506: # salt publish port
                    # CIDR of subnet this master will serve
                    cidr-ip: 10.0.0.0/16 # access via VPC ip range only
                - 4505: # salt return port
                    cidr-ip: 10.0.0.0/16
                - 8080 # chemist, receives Github webhooks for updating formulas
                - 8200 # Vault, secrets management web UI
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        'prod':
            # unique because: 'subdomains' contains static values.
            # mutually exclusive with '2018-04-09-2' !
            unique: true
            subdomains:
                - master-server
    vagrant:
        ports:
            8200: 8200 # Vault GUI

lax:
    description: article-json store
    subdomain: lax # lax.elifesciences.org
    repo: https://github.com/elifesciences/lax.git
    formula-repo: https://github.com/elifesciences/lax-formula
    aws:
        ec2:
            ports:
                - 22
                - 443
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 8001 # bot-lax web UI to upload/validate/transform XML and article-json
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        sqs:
            bot-lax-{instance}-inc: {}
            bot-lax-{instance}-out: {}
    aws-alt:
        end2end:
            description: production-like
            ec2:
                cluster-size: 2
            rds:
                storage: 10
                backup-retention: 2 # days
            ext:
                size: 10 # GB
            elb:
                protocol:
                    - https
                additional_listeners:
                    bot_lax_adaptor:
                        protocol: https
                        port: 8001
        prod:
            description: RDS backed
            ec2:
                cluster-size: 3
            rds:
                storage: 10
                multi-az: true
            ext:
                size: 10 # GB
            elb:
                protocol:
                    - https
                additional_listeners:
                    bot_lax_adaptor:
                        protocol: https
                        port: 8001
    vagrant:
        ports:
            1239: 80
            1240: 8001

api-gateway:
    subdomain: gateway # "gateway.elifesciences.org"
    formula-repo: https://github.com/elifesciences/api-gateway-formula
    aws:
        ec2:
            root:
                size: 30 # GB
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443 # public access to api gateway
                - 1234: # caddy metrics
                    cidr-ip: 10.0.0.0/16
                # - 8000: # don't expose to public. Kong uses this to proxy requests.
                # - 8001: # don't expose to public. Kong uses this for API admin.
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        fastly:
            subdomains:
                - "{instance}--cdn-gateway"
            healthcheck:
                path: /ping-fastly
                check-interval: 10000
                timeout: 2000
            vcl:
                - "original-host"
                - "gzip-by-content-type-suffix"
            gcslogging:
                bucket: "{instance}-elife-fastly"
                path: "api-gateway--{instance}/"
                period: 600
            bigquerylogging:
                project: "elife-fastly"
                dataset: "{instance}"
                table: "api_gateway"
    aws-alt:
        # standalone instances do not have access to Vault secrets via the master-server and it's ext_pillar
        standalone:
            fastly: false
        s2004:
            fastly: false
        snsalt:
            fastly: false
        continuumtest:
            # unique because:
            # - 'fastly.bigquerylogging.dataset' is static.
            unique: true
            fastly:
                bigquerylogging:
                    dataset: staging
                gcslogging:
                    bucket: staging-elife-fastly
        prod:
            # unique because: 'fastly.subdomains' contains static values.
            unique: true
            fastly:
                ip-blacklist: true # maintained at https://manage.fastly.com/configure/services/
                subdomains:
                    - "{instance}--cdn-gateway"
                    - api
    vagrant:
        ports:
            1323: 80

journal:
    subdomain: journal # journal.elifesciences.org
    intdomain: null
    repo: https://github.com/elifesciences/journal
    formula-repo: https://github.com/elifesciences/journal-formula
    formula-dependencies:
        - https://github.com/elifesciences/builder-base-formula
        - https://github.com/elifesciences/api-dummy-formula
    aws:
        ec2:
            ports:
                - 22
                - 443
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        ci:
            ec2:
                type: c4.2xlarge
                ports:
                    - 22
                    - 443
        end2end:
            description: end2end environment for journal. ELB on top of multiple EC2 instances
            ec2:
                cluster-size: 2
            elasticache:
                engine: redis
                clusters: 2
                overrides:
                    2:
                        type: cache.t2.micro
            alb:
                listeners:
                    listener1:
                        protocol: http
                        port: 80
                        forward: target-group1
                    listener2:
                        protocol: https
                        port: 443
                        forward: target-group1
                target_groups:
                    target-group1:
                        protocol: http
                        port: 80
                        healthcheck:
                            path: /ping
                            timeout: 4
                            interval: 5
                            unhealthy_threshold: 2
                            healthy_threshold: 2
            fastly:
                subdomains:
                    - "{instance}--cdn-journal"
                healthcheck:
                    path: /ping-fastly
                    check-interval: 10000
                    timeout: 2000
                errors:
                    # always prod for simplicity
                    url: https://prod-elife-error-pages.s3.amazonaws.com/
                    codes:
                        404: "404.html"
                        410: "410.html"
                        503: "503.html"
                    fallbacks:
                        4xx: "4xx.html"
                        5xx: "5xx.html"
                ip-blacklist: true # maintained at https://manage.fastly.com/configure/services/1WzbLJKoGqzOF1IrhTNx2M/versions/19/data/acls
                vcl:
                    - "original-host"
                    - "ping-status"
                    - "strip-non-journal-cookies"
                    - "journal-google-scholar"
                    - "journal-google-scholar-vary"
                gcslogging:
                    bucket: "{instance}-elife-fastly"
                    path: "journal--{instance}/"
                    period: 600
                bigquerylogging:
                    project: "elife-fastly"
                    dataset: "{instance}"
                    table: "journal"
        continuumtest:
            # unique because: 'fastly.bigquerylogging.*' values are static.
            unique: true
            elasticache:
                engine: redis
                type: cache.t2.micro
                clusters: 2
            alb:
                listeners:
                    listener1:
                        protocol: http
                        port: 80
                        forward: target-group1
                    listener2:
                        protocol: https
                        port: 443
                        forward: target-group1
                target_groups:
                    target-group1:
                        protocol: http
                        port: 80
                        healthcheck:
                            path: /ping
                            timeout: 4
                            interval: 5
                            unhealthy_threshold: 2
                            healthy_threshold: 2
            fastly:
                subdomains:
                    - "{instance}--cdn-journal"
                healthcheck:
                    path: /ping-fastly
                    check-interval: 10000
                    timeout: 2000
                errors:
                    # always prod for simplicity
                    url: https://prod-elife-error-pages.s3.amazonaws.com/
                    codes:
                        404: "404.html"
                        410: "410.html"
                        503: "503.html"
                    fallbacks:
                        4xx: "4xx.html"
                        5xx: "5xx.html"
                ip-blacklist: true # maintained at https://manage.fastly.com/configure/services/6fX98C3dDfqypuWzfAh0bN/versions/78/data/acls
                vcl:
                    - "original-host"
                    - "ping-status"
                    - "strip-non-journal-cookies"
                    - "journal-google-scholar"
                    - "journal-google-scholar-vary"
                gcslogging:
                    bucket: staging-elife-fastly
                    path: "journal--{instance}/"
                    period: 600
                bigquerylogging:
                    project: "elife-fastly"
                    dataset: "staging"
                    table: "journal"
        prod:
            description: production environment for journal. An ELB on top of multiple EC2 instances fronted by Fastly.
            # unique because:
            # - 'fastly.subdomains' contains static values.
            # - 'cloudfront.subdomains' contains static values.
            unique: true
            ec2:
                cluster-size: 4
            elasticache:
                engine: redis
                type: cache.t2.medium # 3.22 GB of memory, ~$50/mo
                clusters: 2
                overrides:
                    2:
                        type: cache.t2.micro # 0.56 GB of memory, ~$12/mo
            alb:
                listeners:
                    listener1:
                        protocol: http
                        port: 80
                        forward: target-group1
                    listener2:
                        protocol: https
                        port: 443
                        forward: target-group1
                target_groups:
                    target-group1:
                        protocol: http
                        port: 80
                        healthcheck:
                            path: /ping
                            timeout: 4
                            interval: 5
                            unhealthy_threshold: 2
                            healthy_threshold: 2
            cloudfront:
                subdomains:
                    - "placeholder2-prod-journal" # only here to avoid rewriting the following values
                    - www
                    - elife
                    - prod
                headers:
                    - Host
                errors:
                    domain: prod-elife-error-pages.s3-website-us-east-1.amazonaws.com
                    pattern: "???.html"
                    codes:
                        # ELB with no active instances
                        503: "/5xx.html"
                    protocol: http
            fastly:
                subdomains:
                    - "{instance}--cdn-journal"
                    - "placeholder-prod-journal" # only here to avoid rewriting the following values
                    - ""
                healthcheck:
                    path: /ping-fastly
                    check-interval: 10000
                    timeout: 2000
                errors:
                    # always prod for simplicity
                    url: https://prod-elife-error-pages.s3.amazonaws.com/
                    codes:
                        404: "404.html"
                        410: "410.html"
                        503: "503.html"
                    fallbacks:
                        4xx: "4xx.html"
                        5xx: "5xx.html"
                ip-blacklist: true # maintained at https://manage.fastly.com/configure/services/7iWUGx8Bl9k3qZvJf0K0hc/versions/34/data/acls
                vcl:
                    - "original-host"
                    - "ping-status"
                    - "strip-non-journal-cookies"
                    - "journal-google-scholar"
                    - "journal-google-scholar-vary"
                gcslogging:
                    bucket: "{instance}-elife-fastly"
                    path: "journal--{instance}/"
                    period: 600
                bigquerylogging:
                    project: "elife-fastly"
                    dataset: "{instance}"
                    table: "journal"
    vagrant:
        ram: 4096
        ports:
            1240: 80

pattern-library:
    subdomain: ui-patterns
    repo: https://github.com/elifesciences/pattern-library
    formula-repo: https://github.com/elifesciences/pattern-library-formula
    aws:
        ec2:
            ports:
                - 22
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        ci:
            ec2: false
            s3:
                "{instance}-pattern-library":
                    public: true
        prod:
            # unique because: 'subdomains' contains static values.
            unique: true
            subdomains:
                - ui-patterns
    vagrant:
        ports:
            1340: 80

elife-metrics:
    description: journal-level metrics
    subdomain: metrics # metrics.elifesciences.org
    repo: https://github.com/elifesciences/elife-metrics
    formula-repo: https://github.com/elifesciences/elife-metrics-formula
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        end2end:
            description: end2end environment for metrics. RDS backed.
            rds:
                backup-retention: 2 # days
        prod:
            description: production environment for metrics. RDS backed.
            ext:
                size: 10 # GB
            rds:
                # lsh@2022-03-01: upgraded from a db.t2.small.
                # it was seeing a constant > 20% CPU usage and wasn't regenerating credits well.
                type: db.t3.medium
                multi-az: true
                storage: 20
    vagrant:
        ports:
            1240: 80

elife-bot:
    repo: https://github.com/elifesciences/elife-bot
    formula-repo: https://github.com/elifesciences/elife-bot-formula
    subdomain: bot
    # ip: 54.164.145.166 # bot.elifesciences.org must be available at this IP
    aws:
        ec2:
            ports:
                - 22
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        ext:
            size: 30 # GB
        s3:
            "{instance}-elife-silent-corrections":
            "{instance}-elife-published":
                public: true
                cors: true
            "{instance}-elife-bot-sessions":
            "{instance}-elife-bot-digests-input":
            "{instance}-elife-bot-decision-letter-input":
            "{instance}-elife-bot-decision-letter-output":
            "{instance-alias-or-instance}-elife-bot-accepted-submission-cleaning-output":
        sqs:
            # gnott@2021-08: poa-incoming-queue was configured to avoid the rigidly timed PoA packaging process.
            # now the S3 notifications go into the queue, and elife-bot reads the messages at four specific times daily
            "{instance}-poa-incoming-queue":
                # no subscriptions to SNS
                subscriptions: []
            # gnott@2021-08: used for the RDS / ERA article pipeline to trigger depositing to Software Heritage.
            "{instance}-era-incoming-queue":
                subscriptions: []
        sns:
            - elife-bot-event-property--{instance}
    aws-alt:
        ci:
            s3:
                "{instance}-elife-published":
                    deletion-policy: retain
                "{instance}-elife-striking-images":
        end2end:
            ec2:
                type: t3.medium
                ports:
                    - 22
                    - 8020 # exposing FTP contents
                    - 8021 # exposing FTP contents, HTTPS
                    - 1080 # exposing mailcatcher API
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
            s3:
                "{instance}-elife-published":
                    deletion-policy: retain
                "{instance}-elife-silent-corrections":
                    sqs-notifications:
                        end2end-incoming-queue: {}
                "{instance}-elife-bot-digests-input":
                    sqs-notifications:
                        end2end-incoming-queue: {}
                "{instance}-elife-bot-decision-letter-input":
                    sqs-notifications:
                        end2end-incoming-queue: {}
                "{instance}-elife-ejp-poa-delivery":
                    sqs-notifications:
                        end2end-poa-incoming-queue: {}
                    deletion-policy: delete
                "{instance}-elife-striking-images":
                # commented out because bucket already exists outside of CloudFormation:
                #"end2end-elife-bot":
                #    deletion-policy: delete
                #end2end-elife-production-final:
                #    sqs-notifications:
                #        end2end-incoming-queue: {}
                #           #prefix: null
                #           #suffix: null
        continuumtest:
            s3:
                "{instance}-elife-published":
                    deletion-policy: retain
                "{instance}-elife-silent-corrections":
                    sqs-notifications:
                        ct-incoming-queue: {}
                "{instance}-elife-bot-digests-input":
                    sqs-notifications:
                        ct-incoming-queue: {}
                "{instance}-elife-bot-decision-letter-input":
                    sqs-notifications:
                        ct-incoming-queue: {}
                "{instance}-elife-ejp-poa-delivery":
                    sqs-notifications:
                        continuumtest-poa-incoming-queue: {}
                "{instance}-elife-striking-images":
                # commented out because bucket exists outside of CloudFormation:
                #"continuumtest-elife-bot":
                #    deletion-policy: delete
            sqs:
                "{instance}-elife-accepted-submission-cleaning-s3-events":
                    subscriptions:
                        - "{instance}-elife-accepted-submission-cleaning-s3-events" # see the 'accepted-submission-cleaning' project
        prod:
            ec2:
                type: t3.medium
            s3:
                "{instance}-elife-published":
                    deletion-policy: retain
                "{instance}-elife-silent-corrections":
                    deletion-policy: retain
                    sqs-notifications:
                        incoming-queue: {}
                "{instance}-elife-bot-digests-input":
                    deletion-policy: retain
                    sqs-notifications:
                        incoming-queue: {}
                "{instance}-elife-bot-decision-letter-input":
                    deletion-policy: retain
                    sqs-notifications:
                        incoming-queue: {}
                "{instance}-elife-bot-accepted-submission-cleaning-output":
                    deletion-policy: retain
                # buckets needed by *elife-bot--prod* but not under configuration control:
                # - https://github.com/elifesciences/issues/issues/7246
                #"elife-ejp-poa-delivery":
                #    sqs-notifications:
                #        prod-poa-incoming-queue: {}
                #    deletion-policy: retain
                #elife-bot
                #elife-ejp-ftp
                #elife-ejp-poa-delivery
                #elife-lens # should probably belong to a 'lens' project
                #elife-poa-packaging
                #elife-publishing-archive
                #elife-publishing-expanded
                #elife-striking-images

            sqs:
                "{instance}-elife-accepted-submission-cleaning-s3-events":
                    subscriptions:
                        - elife-accepted-submission-cleaning-s3-events # see the 'accepted-submission-cleaning' project
    vagrant: {}

generic-cdn:
    description: generic CDN for content like PDF, images
    default-branch: null
    intdomain: null
    aws:
        ec2: false
        fastly:
            subdomains:
                - "{instance}-cdn"
            backends:
                # first is default
                default:
                    hostname: elife-cdn.s3.amazonaws.com
                articles:
                    hostname: "{instance}-elife-published.s3.amazonaws.com"
                    condition: req.url ~ "^/articles/"
            default-ttl: 86400 # seconds
            vcl:
                - "original-host"
                - "office-webdav-200"
            surrogate-keys:
                article-versioned-assets:
                    url: "^/articles/([0-9]+)/elife-([a-z-0-9]+)-v([0-9]+)\\.(.+)$"
                    value: "article/\\1 article/\\1v\\3"
                    samples:
                        article-asset:
                            path: /articles/10627/elife-10627-fig1-v1.tif
                            expected: "article/10627 article/10627v1"
                        article-pdf:
                            path: /articles/10627/elife-10627-v1.pdf
                            expected: "article/10627 article/10627v1"
                        article-figures-pdf:
                            path: /articles/00666/elife-00666-figures-v1.pdf
                            expected: "article/00666 article/00666v1"
                        article-figure-supplement:
                            path: /articles/00666/elife-00666-fig2-figsupp1-v1.tif
                            expected: "article/00666 article/00666v1"
                        appendix-figure-supplement:
                            path: /articles/18215/elife-18215-app2-fig1-figsupp2-v2.tif
                            expected: "article/18215 article/18215v2"
                        # legacy, not supported: /articles/10627/elife-10627-fig1-v1-download.jpg
                        # legacy, not supported: /articles/10627/elife-10627-fig1-v1-972w.jpg
                article-unversioned:
                    url: "^/articles/([0-9]+)/elife-([a-z-0-9]+)-(video|media)([0-9]+)\\.(.+)$"
                    value: "article/\\1 article/\\1/videos"
                    samples:
                        article-video:
                            path: /articles/34773/elife-34773-video2.mp4
                            expected: "article/34773 article/34773/videos"
                        article-still:
                            path: /articles/07398/elife-07398-media1.jpg
                            expected: "article/07398 article/07398/videos"
                        article-figure-video:
                            path: /articles/26866/elife-26866-fig3-video1.mp4
                            expected: "article/26866 article/26866/videos"
            bigquerylogging:
                project: "elife-fastly"
                dataset: "{instance}"
                table: "generic_cdn"
    aws-alt:
        # have to specify this because otherwise configuration such as `fresh` inherited from defaults
        # won't see the ec2: false in `aws:` and test_validation.py will fail for all of them.
        fresh:
            ec2: false
        s2004:
            ec2: false
        standalone:
            ec2: false
        end2end:
            # unique because:
            # - 'fastly.gcslogging.path' is static. log data would be commingled.
            unique: true
            fastly:
                gcslogging:
                    bucket: end2end-elife-fastly
                    path: generic-cdn--end2end/
                    period: 600
        continuumtest:
            # unique because:
            # - 'fastly.gcslogging.path' is static. log data would be commingled.
            unique: true
            fastly:
                gcslogging:
                    bucket: staging-elife-fastly
                    path: generic-cdn--continuumtest/
                    period: 600
                bigquerylogging:
                    dataset: "staging"
        prod:
            # unique because:
            # - 'fastly.subdomains' contains static values.
            # - 'fastly.gcslogging.path' is static. log data would be commingled.
            unique: true
            fastly:
                subdomains:
                    - "cdn"
                gcslogging:
                    bucket: prod-elife-fastly
                    path: generic-cdn--prod/
                    period: 600

journal-cms:
    subdomain: journal-cms # journal-cms.elifesciences.org
    repo: https://github.com/elifesciences/journal-cms
    formula-repo: https://github.com/elifesciences/journal-cms-formula
    formula-dependencies:
        - https://github.com/elifesciences/builder-base-formula
        - https://github.com/elifesciences/api-dummy-formula
    aws:
        ec2:
            ports:
                - 22
                - 443
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        sqs:
            # journal-cms--prod, journal-cms--end2end, etc.
            journal-cms--{instance}:
                subscriptions:
                    - bus-articles--{instance}
                    - bus-digests--{instance}
                    - bus-metrics--{instance}
    aws-alt:
        ckeditor:
            description: testing environment. backed by RDS
            ext:
                size: 10 # GB
        ci:
            ext:
                size: 5 # GB
        end2end:
            description: production-like environment. backed by RDS
            rds:
                type: db.t3.medium
                engine: MySQL
                version: '5.7'
                storage: 12 # GB
                backup-retention: 2 # days
            ext:
                size: 30 # GB
        continuumtest:
            description: production-like environment.
            rds:
                engine: MySQL
                version: '5.7'
                storage: 48 # GB
                backup-retention: 2 # days
            ext:
                size: 60 # GB
        prod:
            description: production environment. backed by RDS
            rds:
                type: db.t3.medium
                engine: MySQL
                version: '5.7'
                multi-az: true
                # storage can be increased but not decreased.
                # journal-cms--prod once needed this amount.
                storage: 48 # GB
            ext:
                size: 60 # GB
    vagrant:
        ports:
            1241: 80


elife-dashboard:
    subdomain: ppp-dash # ppp-dash.elifesciences.org
    repo: https://github.com/elifesciences/elife-dashboard
    formula-repo: https://github.com/elifesciences/elife-dashboard-formula
    default-branch: develop
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        end2end:
            # unique because: 'sqs' contains static values.
            unique: true
            description: production-like environment.
            rds:
                backup-retention: 2 # days
            sqs:
                # legacy custom name
                end2end-event-property-incoming-queue:
                    subscriptions:
                        - elife-bot-event-property--end2end
        continuumtest:
            # unique because: 'sqs' contains static values.
            unique: true
            sqs:
                # legacy custom name
                ct-event-property-incoming-queue:
                    subscriptions:
                        - elife-bot-event-property--continuumtest
        prod:
            # unique because: static value in 'sqs'.
            unique: true
            description: production environment. backed by RDS
            rds:
                multi-az: true
            sqs:
                # legacy custom name
                event-property-incoming-queue:
                    subscriptions:
                        - elife-bot-event-property--prod
    vagrant:
        ports:
            1324: 80
            8080: 8080 # scheduler (blocked on AWS)

elife-reporting:
    description: an environment for development of 'eLife-Reporting-SQL', integrated with lax.
    formula-repo: https://github.com/elifesciences/elife-reporting-formula
    aws: {}
    vagrant:
        ram: 1024
        ports:
            1333: 80

elife-libraries:
    domain: false
    subdomain: libraries
    formula-repo: https://github.com/elifesciences/elife-libraries-formula
    aws:
        ec2:
            ports:
                - 22
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        ext:
            size: 30 # GB
    aws-alt:
        ci:
            description: |
                running unit tests.
                running tasks that require a builder installation but can't be run on `elife-alfred--prod`.
        load:
            description: running load tests
            ec2:
                type: t3.2xlarge
        spectrum:
            description: running end2end tests
            ec2:
                type: t3.medium # 2 core, 8 GB of memory
            ext:
                size: 50 # GB
        powerful3:
            description: speeding up bot-lax-adaptor tests even more
            ec2:
                type: c5.9xlarge
    vagrant:
        ram: 4096

containers:
    description: run any Docker-based workload
    domain: false
    intdomain: false
    formula-repo: https://github.com/elifesciences/containers-formula
    aws:
        ec2:
            ports:
                - 22
    aws-alt:
        # AMIs created from here used in
        # https://alfred.elifesciences.org/configure
        # `Cloud` section
        jenkins-plugin-ami:
            ext: false
            ec2:
                root:
                    size: 100 # GB
        xlarge:
            ec2:
                type: t3.xlarge # 4 CPUs
                cpu-credits: unlimited
    vagrant:
        ram: 1024

elife-alfred:
    subdomain: alfred
    formula-repo: https://github.com/elifesciences/elife-alfred-formula
    aws:
        ec2:
            type: t3.large
            ports:
                - 22
                - 443
                - 10241 # JNLP for jenkins-cli.jar
                - 16022 # Jenkins SSH port
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        ext:
            size: 100 # GB
        s3:
            "{instance}-elife-alfred":
                deletion-policy: delete
    aws-alt:
        prod:
            # unique because: 'subdomains' contains static values.
            unique: true
            subdomains:
                - alfred
                - ci--alfred # backward compatibility
            s3:
                "{instance}-elife-alfred":
                    deletion-policy: retain
    vagrant:
        ram: 4096
        ports:
            1433: 80

api-dummy:
    subdomain: api-dummy
    repo: https://github.com/elifesciences/api-dummy
    formula-repo: https://github.com/elifesciences/api-dummy-formula
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        demo:
            ec2:
                type: t3.micro
    vagrant:
        ports:
            1242: 80


bus:
    description: see https://github.com/elifesciences/bus
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
        sns:
            # bus-articles--prod, bus-articles--end2end, etc.
            - bus-articles--{instance}
            - bus-podcast-episodes--{instance}
            - bus-subjects--{instance}
            - bus-people--{instance}
            - bus-collections--{instance}
            - bus-events--{instance}
            - bus-interviews--{instance}
            - bus-blog-articles--{instance}
            - bus-annual-reports--{instance}
            - bus-covers--{instance}
            - bus-labs-posts--{instance}
            - bus-press-packages--{instance}
            - bus-metrics--{instance}
            - bus-profiles--{instance}
            - bus-digests--{instance}
            - bus-reviewed-preprints--{instance}

search:
    domain: false
    subdomain: search
    repo: https://github.com/elifesciences/search
    formula-repo: https://github.com/elifesciences/search-formula
    formula-dependencies:
        - https://github.com/elifesciences/builder-base-formula
        - https://github.com/elifesciences/api-dummy-formula
    aws:
        ec2:
            type: t3.medium
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        sqs:
            # search--prod, search--end2end, etc.
            search--{instance}:
                subscriptions:
                    - bus-articles--{instance}
                    - bus-podcast-episodes--{instance}
                    - bus-collections--{instance}
                    - bus-interviews--{instance}
                    - bus-blog-articles--{instance}
                    - bus-labs-posts--{instance}
                    - bus-reviewed-preprints--{instance}
    aws-alt:
        end2end:
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # ELB only
                    - 4730: # Gearman
                        cidr-ip: 10.0.0.0/16 # follower nodes
                    - 9201: # Opensearch
                        cidr-ip: 10.0.0.0/16 # follower nodes
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
                cluster-size: 2
                dns-internal: true
            elb:
                protocol:
                    - http
        continuumtest:
            ec2:
                root:
                    size: 15 # GB
        prod:
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # ELB only
                    - 4730: # Gearman
                        cidr-ip: 10.0.0.0/16 # follower nodes
                    - 9201: # Opensearch
                        cidr-ip: 10.0.0.0/16 # follower nodes
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
                root:
                    size: 30 # GB
                cluster-size: 2
                dns-internal: true
            elb:
                protocol:
                    - http
    vagrant:
        ram: 4096
        ports:
            1244: 80
            1245: 8080
            9921: 9201 # opensearch

recommendations:
    domain: false
    subdomain: recommendations
    repo: https://github.com/elifesciences/recommendations
    formula-repo: https://github.com/elifesciences/recommendations-formula
    formula-dependencies:
        - https://github.com/elifesciences/builder-base-formula
        - https://github.com/elifesciences/api-dummy-formula
    aws:
        ec2:
            type: t3.medium
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt: {}
    vagrant:
        ports:
            1254: 80

personalised-covers:
    subdomain: personalised-covers
    repo: https://github.com/elifesciences/personalised-covers
    formula-repo: https://github.com/elifesciences/personalised-covers-formula
    formula-dependencies:
        - https://github.com/elifesciences/builder-base-formula
        - https://github.com/elifesciences/api-dummy-formula
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        s3:
            "{instance}-elife-personalised-covers":
                deletion-policy: delete
    aws-alt:
        standalone:
            s3: false
        ci:
            ec2:
                cpu-credits: unlimited
        continuumtest:
            s3:
                "{instance}-elife-personalised-covers":
                    deletion-policy: retain
        prod:
            # unique because: 'subdomains' contains static values.
            unique: true
            subdomains:
                - covers
            s3:
                "{instance}-elife-personalised-covers":
                    deletion-policy: retain
    vagrant:
        ports:
            1246: 80
            1247: 8080

observer:
    description: article and non-article content reports, including RSS feeds and sitemap.
    subdomain: observer # observer.elifesciences.org
    repo: https://github.com/elifesciences/observer
    formula-repo: https://github.com/elifesciences/observer-formula
    aws:
        ec2:
            type: t3.medium
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        sqs:
            observer--{instance}:
                subscriptions:
                    - bus-articles--{instance}
                    - bus-press-packages--{instance}
                    - bus-labs-posts--{instance}
                    - bus-digests--{instance}
                    - bus-podcast-episodes--{instance}
                    - bus-collections--{instance}
                    - bus-interviews--{instance}
                    - bus-blog-articles--{instance}
    aws-alt:
        end2end:
            rds:
                storage: 10
                backup-retention: 2 # days
        prod:
            # ip: 34.201.187.7 # observer--prod, points to observer.elifesciences.org
            rds:
                storage: 10
                multi-az: true
    vagrant:
        ports:
            1239: 80

error-pages:
    description: static deployment of https://github.com/elifesciences/error-pages
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
        s3:
            "{instance}-elife-error-pages":
                website-configuration:
                    # lsh@2023-05-02: index.html doesn't exist in repo. You'll get a 404 if you visit this website at:
                    # http://continuumtest-elife-error-pages.s3-website-us-east-1.amazonaws.com
                    index-document: index.html
                cors: true

figure-viewer:
    description: static deployment of https://github.com/elifesciences/figure-viewer
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
        s3:
            "{instance}-elife-figure-viewer":
                website-configuration:
                    index-document: index.html

iiif:
    description: IIIF, image server for resizing/tiling/zooming
    subdomain: iiif
    intdomain: null
    repo: https://github.com/elifesciences/loris
    formula-repo: https://github.com/elifesciences/iiif-formula
    aws:
        ec2:
            type: t3.medium
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        fastly:
            subdomains:
                - "{instance}--cdn-iiif"
            gcslogging:
                bucket: "{instance}-elife-fastly"
                path: "iiif--{instance}/"
                period: 600
            bigquerylogging:
                project: "elife-fastly"
                dataset: "{instance}"
                table: "iiif"
            healthcheck:
                path: /ping-fastly
                check-interval: 10000
                timeout: 2000
            surrogate-keys:
                article-id-versioned:
                    url: "^/lax[:/]([0-9]+)(?:/|%252F)elife-(?:[a-z0-9-]+)-v([0-9]+)\\.(?:.+)$"
                    value: "article/\\1 article/\\1v\\2"
                    samples:
                        figure:
                            path: /lax:10627/elife-10627-fig1-v1.tif/full/1500,/0/default.jpg
                            expected: "article/10627 article/10627v1"
                        article-figure-supplement:
                            path: /lax:00666/elife-00666-fig2-figsupp1-v1.tif
                            expected: "article/00666 article/00666v1"
                        appendix-figure-supplement:
                            path: /lax:18215/elife-18215-app2-fig1-figsupp2-v2.tif
                            expected: "article/18215 article/18215v2"
                        encoded-urls:
                            path: /lax/18215%252Felife-18215-app2-fig1-figsupp2-v2.tif
                            expected: "article/18215 article/18215v2"
                article-id-unversioned:
                    url: "^/lax[:/]([0-9]+)(?:/|%252F)elife-(?:[a-z-0-9]+)-(?:video|media)(?:[0-9]+)\\.(?:.+)$"
                    value: "article/\\1 article/\\1/videos"
                    samples:
                        video-still:
                            path: /lax:34773/elife-34773-video2.jpg/full/639,/0/default.jpg
                            expected: "article/34773 article/34773/videos"
                        another-video-still:
                            path: /lax:07398/elife-07398-media1.jpg
                            expected: "article/07398 article/07398/videos"
                        article-figure-video-still:
                            path: /lax:26866/elife-26866-fig3-video1.jpg
                            expected: "article/26866 article/26866/videos"
                        encoded-urls:
                            path: /lax/26866%252Felife-26866-fig3-video1.jpg
                            expected: "article/26866 article/26866/videos"
                digest-id:
                    url: "^/digests/([0-9]+)(?:/|%252F)(?:.+)$"
                    value: "digest/\\1"
                    samples:
                        digest-image-info-json:
                            path: /digests/39984%252Fdigest-39984.jpg/info.json
                            expected: "digest/39984"
                        digest-image-full:
                            path: /digests/39984%252Fdigest-39984.jpg/full/full/0/default.jpg
                            expected: "digest/39984"
                        digest-image-resized:
                            path: /digests/39984%252Fdigest-39984.jpg/full/500,/0/default.jpg
                            expected: "digest/39984"
                        non-encoded-urls:
                            path: /digests/39984/digest-39984.jpg/info.json
                            expected: "digest/39984"
    aws-alt:
        standalone:
            fastly: false
        s2004:
            fastly: false
        snsalt:
            fastly: false
        devchk:
            description: image deviation testing, checks for regressions and errors in article images.
            fastly: false
            type: c5.2xlarge # 8 cores, 16GB ram, $0.34 per Hour
            ec2:
                masterless: True
                root:
                    size: 100 # GB # this could be 30GB-ish
                    type: gp2 # makes such a difference!
            ports:
                - 22
            ext:
                size: 100 # GB
                type: standard

        # for testing new versions
        ci:
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # ELB only
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
                cluster-size: 4
            ext:
                size: 30 # GB
            elb:
                protocol:
                    - https
                healthcheck:
                    path: /
            fastly: false
        end2end:
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # ELB only
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
                cluster-size: 2
            ext:
                size: 30 # GB
            elb:
                protocol:
                    - https
                healthcheck:
                    path: /
        # manual tests
        continuumtest:
            # unique because:
            # - 'fastly.bigquerylogging.dataset' is using a static value.
            unique: true
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # ELB only
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
                cluster-size: 2
            elb:
                protocol:
                    - https
                healthcheck:
                    path: /
            fastly:
                bigquerylogging:
                    dataset: "staging"
                gcslogging:
                    bucket: staging-elife-fastly
        prod:
            # unique because: 'fastly.subdomains' contains static values.
            unique: true
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # ELB only
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
                cluster-size: 3
            ext:
                size: 30 # GB
            elb:
                protocol:
                    - https
                healthcheck:
                    path: /
            fastly:
                subdomains:
                    - "{instance}--cdn-iiif"
                    - iiif
    vagrant:
        ports:
            1261: 80

redirects:
    description: redirect various domains to the canonical elifesciences.org
    subdomain: redirects
    intdomain: null
    formula-repo: https://github.com/elifesciences/redirects-formula
    aws:
        ec2:
            # lsh@2022-03-14: changed default instance type from a t2.nano to a t2.small.
            # lsh@2022-06-25: t2.small has changed to t3.small
            # getting freezing behaviour during formula testing
            ports:
                - 22
                - 80
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        prod:
            ec2:
                # lsh@2022-06-27: changed default instance from t2.nano to t3.micro
                type: t3.micro
            # unique because: 'cloudfront.subdomains' contains static values.
            unique: true
            cloudfront:
                # arn:aws:iam::512686554592:server-certificate/cloudfront/redirects/2019-06-17.elifesciences.net
                certificate_id: ASCAXOXT77XQDXO44HK4F
                subdomains:
                    - elifesciences.net
                    - e-lifesciences.org
                    - e-lifesciences.net
                    - elifejournal.net
                    - e-lifejournal.org
                    - e-lifejournal.com
                    - e-lifejournal.net
                    - elifejournal.org
                headers:
                    - Host
    vagrant:
        ram: 512
        ports:
            1262: 80

profiles:
    subdomain: profiles
    repo: https://github.com/elifesciences/profiles
    formula-repo: https://github.com/elifesciences/profiles-formula
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        end2end:
            rds:
                backup-retention: 2 # days
            ec2:
                ports:
                    - 22
                    - 80:
                        cidr-ip: 10.0.0.0/16 # internal access only
                    - 443
                    - 8081 # orcid-dummy http
                    - 8082 # orcid-dummy https
                    - 9100: # prometheus node_exporter
                        cidr-ip: 10.0.0.0/16 # internal access only
        prod:
            rds:
                multi-az: true
    vagrant:
        ports:
            1265: 80

annotations:
    description: microservice that gives access to eLife annotations on Hypothes.is
    domain: false
    subdomain: annotations
    repo: https://github.com/elifesciences/annotations
    formula-repo: https://github.com/elifesciences/annotations-formula
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # internal access only
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        sqs:
            annotations--{instance}:
                subscriptions:
                    - bus-profiles--{instance}
    aws-alt:
        prod:
            s3:
                "{instance}-elife-annotations-hypothesis-emails":
                    # bucket policy has been added:
                    # http://docs.aws.amazon.com/ses/latest/DeveloperGuide/receiving-email-permissions.html#receiving-email-permissions-s3
    vagrant:
        ram: 1024
        ports:
            1248: 80

digests:
    subdomain: digests
    domain: false
    repo: https://github.com/elifesciences/digests
    formula-repo: https://github.com/elifesciences/digests-formula
    aws:
        ec2:
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16 # access via VPC ip range only
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        end2end:
            rds:
                type: db.t3.micro
                backup-retention: 2 # days
        continuumtest:
            rds:
                type: db.t3.micro
                backup-retention: 2 # days
        prod:
            rds:
                type: db.t3.micro
                multi-az: true
    vagrant:
        ram: 1024
        ports:
            1290: 80


# deployed via EKS, not EC2
elife-libero-reviewer:
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
    aws-alt:
        staging:
            s3:
                "{instance}-elife-libero-reviewer":
                    encryption: arn:aws:kms:us-east-1:512686554592:key/b6f44e77-46d8-41bb-a2e5-75c0588a2b20
        prod:
            s3:
                "{instance}-elife-libero-reviewer":
                    encryption: arn:aws:kms:us-east-1:512686554592:key/b6f44e77-46d8-41bb-a2e5-75c0588a2b20

task-adept:
    description: production data dumps from TaskAdept
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
        s3:
            "{instance}-elife-task-adept":

exeter-kriya:
    description: production data dumps from Exeter
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
        s3:
            "{instance}-elife-kriya":

fastly-logs:
    description: Fastly CDN access logs
    domain: false
    intdomain: false
    aws:
        # unique because:
        # - 'gcp.bigquery.{instance}.project' is static.
        # - 'gcp.bigquery.{instance}.tables' contains static values.
        unique: true
        ec2: false
        gcs:
            "{instance}-elife-fastly":
                project: elife-fastly
    gcp:
        bigquery:
            "{instance}":
                project: elife-fastly
                tables:
                    api_gateway:
                        schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
                    generic_cdn:
                        schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
                    journal:
                        schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
                    iiif:
                        schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
                    # lsh@2023-04-25: unused in prod
                    # - https://github.com/elifesciences/issues/issues/8246
                    #reproducible_document_stack:
                    #    schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
    aws-alt: {}
    gcp-alt:
        staging:
            bigquery:
                "{instance}":
                    tables:
                        reproducible_document_stack:
                            schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
        end2end:
            bigquery:
                "{instance}":
                    tables:
                        reproducible_document_stack:
                            schema: ./src/buildercore/bigquery/schemas/fastly-logs-201810.json
        prod:
            bigquery:
                "{instance}":
                    tables:
                        journal:
                            # lsh@2023-06-19: just prod apparently
                            time-partitioning:
                                field: timestamp
                                type: DAY

data-pipeline:
    description: Data consolidation project
    aws:
        ec2: false
        s3:
            "{instance}-elife-data-pipeline":
                 deletion-policy: delete
            "{instance}-elife-data-pipeline-archive":
                 deletion-policy: retain
    gcp:
        bigquery:
            "{instance}": # dataset
                project: elife-data-pipeline

bastion:
    description: intermediate server that gives access to the inside of the VPC
    subdomain: bastion
    formula-repo: https://github.com/elifesciences/bastion-formula
    aws:
        ec2:
            ports:
                - 22
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
    aws-alt:
        prod:
            ec2:
                type: t3.nano # 500 MB ram
            # unique because: 'subdomains' contains static values.
            unique: true
            subdomains:
                - bastion
    vagrant:
        ram: 512

reproducible-document-stack:
    description: Reproducible Document Stack example
    repo: https://github.com/elifesciences/rds-example
    aws:
        # unique because: 'fastly.bigquerylogging.table' contains a static value.
        unique: true
        ec2: false
        s3:
            "{instance}-elife-reproducible-document-stack":
                public: true
        fastly:
            backends:
                # first is default
                default:
                    hostname: "{instance}-elife-reproducible-document-stack.s3.amazonaws.com"
            subdomains:
                - "{instance}--cdn-repro"
            default-ttl: 60 # seconds
            # doesn't work and there's no information about why
            # https://community.fastly.com/t/monitoring-health-status-from-fastly-health-checks/516
            #healthcheck:
            #    path: /ping-fastly
            #    check-interval: 10000
            #    timeout: 2000
            errors:
                # always prod for simplicity
                url: https://prod-elife-error-pages.s3.amazonaws.com/
                codes:
                    503: "503.html"
                fallbacks:
                    4xx: "4xx.html"
                    5xx: "5xx.html"
            vcl:
                - "original-host"
                - "ping-status"
            gcslogging:
                bucket: "{instance}-elife-fastly"
                path: "reproducible-document-stack--{instance}/"
                period: 600
            bigquerylogging:
                project: "elife-fastly"
                dataset: "{instance}"
                table: "reproducible_document_stack"
    aws-alt:
        prod:
            # (still) unique because:
            # - 'fastly.bigquerylogging.table' contains a static value.
            # - 'fastly.subdomains' contains a static value.
            unique: true
            fastly:
                subdomains:
                    - "{instance}--cdn-repro"
                    - repro

kubernetes-aws:
    description: project managing an EKS cluster
    domain: False
    intdomain: False
    aws:
        ec2: false
    aws-alt:
        flux-prod:
            ec2: false
            eks:
                version: '1.27'
                worker:
                    type: t3.large
                    max-size: 34
                    desired-capacity: 16
                    ignore-desired-capacity-drift: true
                iam-oidc-provider: true
                iam-roles:
                    kubernetes-autoscaler:
                        policy-template: kubernetes-autoscaler
                        service-account: cluster-autoscaler-aws-cluster-autoscaler
                        namespace: autoscaler
                    external-dns:
                        policy-template: external-dns
                        service-account: infra-external-dns
                        namespace: infra
        flux-test:
            ec2: false
            eks:
                version: '1.27'
                worker:
                    type: t3.large
                    max-size: 6
                    desired-capacity: 2
                    ignore-desired-capacity-drift: true
                iam-oidc-provider: true
                iam-roles:
                    kubernetes-autoscaler:
                        policy-template: kubernetes-autoscaler
                        service-account: cluster-autoscaler-aws-cluster-autoscaler
                        namespace: autoscaler
                    external-dns:
                        policy-template: external-dns
                        service-account: infra-external-dns
                        namespace: infra
bioprotocol:
    subdomain: bp # {instance}--bp.elifesciences.org
    repo: https://github.com/elifesciences/bioprotocol-service
    formula-repo: https://github.com/elifesciences/bioprotocol-formula
    aws:
        ec2:
            # ip: 52.200.243.108 # required by BP to whitelist our interactions with their API
            ports:
                - 22
                - 80:
                    cidr-ip: 10.0.0.0/16
                - 443
                - 1234: # caddy metrics
                    cidr-ip: 10.0.0.0/16
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        sqs:
            # single queue that receives messages about updates to articles (internally)
            bioprotocol--{instance}:
                subscriptions:
                    - bus-articles--{instance}
    aws-alt: {}
    vagrant:
        ports:
            1280: 80

accepted-submission-cleaning:
    description: see https://github.com/elifesciences/bus
    default-branch: null
    domain: null
    intdomain: null
    aws:
        ec2: false
    aws-alt:
        continuumtest:
            s3:
                "{instance}-elife-accepted-submission-cleaning": {}
            sns:
                - "{instance}-elife-accepted-submission-cleaning-s3-events"
        prod:
            # unique because: 'sns' and 's3' contain static values.
            unique: true
            s3:
                elife-accepted-submission-cleaning:
                    deletion-policy: retain
            sns:
                - elife-accepted-submission-cleaning-s3-events

firewall:
    aws:
        ec2: false
        waf: {}

    aws-alt:
        fresh:
            ec2: false
        s2004:
            ec2: false
        standalone:
            ec2: false
        prod:
            description: General purpose Web Application Firewall
            # unique because: associations can only be associated to one WAF.
            # we should be sharing a single WAF rather than creating multiple instances.
            unique: true
            waf:
                ip-sets:
                    whitelist:
                        # internal vpc traffic between journal nodes and api-gateway nodes
                        # 'subnet-1d4eb46a', 'elife-public-subnet'
                        - 10.0.2.0/24
                        # TurnItInBot
                        - 199.47.87.132/30
                        - 199.47.82.0/28
                        # Elsevier
                        - 203.56.241.128
                        - 54.166.39.175
                        - 125.17.16.94
                        - 123.63.87.185
                        - 125.22.44.100
                        - 101.3.231.64
                        - 145.36.141.14
                        - 145.36.140.14
                        - 115.112.71.126
                        - 182.76.143.226
                        - 61.16.162.69
                        # okinawa institute of science and technology.
                        # because I blocked them once accidentally :(
                        - 203.181.243.17

                associations:
                    - arn:aws:elasticloadbalancing:us-east-1:512686554592:loadbalancer/app/journal--prod/677b5066e869788d
                    - arn:aws:elasticloadbalancing:us-east-1:512686554592:loadbalancer/app/journal--continuumtest/227b8db4a52cc218
                    # lsh@2021-11-23: disabled https://github.com/elifesciences/issues/issues/7089
                    #- arn:aws:elasticloadbalancing:us-east-1:512686554592:loadbalancer/app/journal--end2end/0791eb8462a24c37
                custom-rules:
                    - elife-Whitelist.json # priority 0
                    - elife-Blacklist.json # priority 15
                    # lsh@2022-04-08: disabled, aws bot rules were ineffective, undermining this rule.
                    #- elife-DistributedSlowBot.json
                    # lsh@2023-06-28: same intent, different ingress - via CDN and via prod--journal
                    # using aggregate key to consolidate rules not possible as rule passes when any key in aggregate is absent.
                    # - https://docs.aws.amazon.com/waf/latest/APIReference/API_RateBasedStatementCustomKey.html
                    - elife-RateLimitExcessiveBotTrafficCDN.json # priority 19
                    - elife-RateLimitExcessiveBotTraffic.json # priority 20
                managed-rules:
                    AWS/AWSManagedRulesBotControlRuleSet:
                        priority: 5
                        # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-bot.html
                        excluded:
                            - CategoryAdvertising
                            - CategoryArchiver
                            - CategoryContentFetcher
                            - CategoryHttpLibrary
                            - CategoryLinkChecker
                            - CategoryMiscellaneous
                            - CategoryMonitoring
                            - CategoryScrapingFramework
                            - CategorySearchEngine
                            - CategorySecurity
                            - CategorySeo
                            - CategorySocialMedia
                            - SignalAutomatedBrowser
                            - SignalKnownBotDataCenter
                            - SignalNonBrowserUserAgent
                    # lsh@2023-06-27: disabled, managed rule doesn't support forwarded IP addresses
                    # - https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-ip-rep.html
                    # - https://github.com/elifesciences/issues/issues/8362
                    #AWS/AWSManagedRulesAmazonIpReputationList:
                    #    priority: 6
                    #    excluded:
                    #        -   AWSManagedIPReputationList
                    AWS/AWSManagedRulesCommonRuleSet:
                        priority: 7
                        # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-baseline.html#aws-managed-rule-groups-baseline-crs
                        # these rules use the ruleset action (block).
                        included:
                            - NoUserAgent_HEADER
                            - UserAgent_BadBots_HEADER
                            - GenericLFI_QUERYARGUMENTS
                            - GenericLFI_URIPATH
                            - GenericRFI_URIPATH
                            - CrossSiteScripting_BODY
                        # these rules do *not* use the ruleset action (block), but are
                        # counted and passed through for further processing.
                        excluded:
                            - CrossSiteScripting_COOKIE
                            - CrossSiteScripting_QUERYARGUMENTS
                            - CrossSiteScripting_URIPATH
                            - EC2MetaDataSSRF_BODY
                            - EC2MetaDataSSRF_COOKIE
                            - EC2MetaDataSSRF_QUERYARGUMENTS
                            - EC2MetaDataSSRF_URIPATH
                            - GenericLFI_BODY
                            - GenericRFI_BODY
                            - GenericRFI_QUERYARGUMENTS
                            - RestrictedExtensions_QUERYARGUMENTS
                            - RestrictedExtensions_URIPATH
                            - SizeRestrictions_BODY
                            - SizeRestrictions_Cookie_HEADER
                            - SizeRestrictions_QUERYSTRING
                            - SizeRestrictions_URIPATH
                    AWS/AWSManagedRulesKnownBadInputsRuleSet:
                        priority: 8
                        # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-baseline.html#aws-managed-rule-groups-baseline-known-bad-inputs
                        excluded:
                            - BadAuthToken_COOKIE_AUTHORIZATION
                            - ExploitablePaths_URIPATH
                            - Host_localhost_HEADER
                            - PROPFIND_METHOD
                    AWS/AWSManagedRulesLinuxRuleSet:
                        priority: 9
                        # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-use-case.html#aws-managed-rule-groups-use-case-linux-os
                        excluded:
                            - LFI_BODY
                            - LFI_QUERYARGUMENTS
                            - LFI_URIPATH
                    AWS/AWSManagedRulesPHPRuleSet:
                        priority: 10
                        # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-use-case.html#aws-managed-rule-groups-use-case-php-app
                        included:
                            - PHPHighRiskMethodsVariables_QUERYARGUMENTS
                            - PHPHighRiskMethodsVariables_BODY
                        excluded: []
                    AWS/AWSManagedRulesUnixRuleSet:
                        priority: 11
                        # https://docs.aws.amazon.com/waf/latest/developerguide/aws-managed-rule-groups-use-case.html#aws-managed-rule-groups-use-case-posix-os
                        included:
                            - UNIXShellCommandsVariables_QUERYARGUMENTS
                            - UNIXShellCommandsVariables_BODY
                        excluded: []

monitor:
    description: prometheus + grafana monitoring server
    subdomain: monitor
    formula-repo: https://github.com/elifesciences/monitor-formula
    aws:
        ec2:
            ports:
                - 22
                - 443
                - 9100: # prometheus node_exporter
                    cidr-ip: 10.0.0.0/16 # internal access only
        ext:
            size: 30 # GB

    vagrant:
        ports:
            1241: 80
