defaults:
    description: # leave empty so stacks don't inherit a description
    meta:
        # distinguishes this data from other types and versions of configuration data
        type: stack
        version: 0 # '0' just means it's brand new, highly unstable and almost anything goes.
    resource-list: [] # leave empty so stacks don't inherit a list of resources
    resource-map:
        terraform-project: # resource ID, can be anything so long as it's unique
            meta:
                description: a relative path to a directory of terraform JSON.
                type: terraform-project # resource class, used for validation of data, not neccessarilyb the same as resource ID
                version: 0 # resource class version, used for validation of data
            path: # path/to/terraform/project/config/ I suppose
        builder-project:
            meta:
                description: an instance of an project created by builder and configured in projects/elife.yaml
                type: builder-project
                version: 0
            read-only:
                # I fancy these will be fields that are useful at a glance but otherwise not used.
                created: # project instance created date, populated externally
                updated: # project instance updated date, populated externally
            name: # project name
            instance-id: # project's instance ID

example-stack-identifier:
    description: |
        a description for this example stack of resources
        a resource stack is literally a list of things managed by Cloudformation/Terraform
        a 'resource' describes some bit of infrastructure 
        defining it here demonstrates that we know about it and have brought it under configuration control
    resource-list:
    -   name: journal
        instance-id: prod
